// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danisbagus/semimarket-product/internal/core/port (interfaces: IProductRepo)

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	errs "github.com/danisbagus/semimarket-lib/errs"
	domain "github.com/danisbagus/semimarket-product/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepo is a mock of IProductRepo interface.
type MockIProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepoMockRecorder
}

// MockIProductRepoMockRecorder is the mock recorder for MockIProductRepo.
type MockIProductRepoMockRecorder struct {
	mock *MockIProductRepo
}

// NewMockIProductRepo creates a new mock instance.
func NewMockIProductRepo(ctrl *gomock.Controller) *MockIProductRepo {
	mock := &MockIProductRepo{ctrl: ctrl}
	mock.recorder = &MockIProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepo) EXPECT() *MockIProductRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIProductRepo) Create(arg0 *domain.ProductModel) (*domain.ProductModel, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*domain.ProductModel)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIProductRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIProductRepo)(nil).Create), arg0)
}

// FindAll mocks base method.
func (m *MockIProductRepo) FindAll() ([]domain.ProductModel, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.ProductModel)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIProductRepoMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIProductRepo)(nil).FindAll))
}

// FindOneByID mocks base method.
func (m *MockIProductRepo) FindOneByID(arg0 int64) (*domain.ProductModel, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0)
	ret0, _ := ret[0].(*domain.ProductModel)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockIProductRepoMockRecorder) FindOneByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockIProductRepo)(nil).FindOneByID), arg0)
}
